      @256
      D=A
      @SP
      M=D
// call Sys.init 0
      @Sys.init$ret.2
      D=A
      @SP
      A=M
      M=D
      @SP
      M=M+1
      @LCL
      D=M
      @SP
      A=M
      M=D
      @SP
      M=M+1
      @ARG
      D=M
      @SP
      A=M
      M=D
      @SP
      M=M+1
      @THIS
      D=M
      @SP
      A=M
      M=D
      @SP
      M=M+1
      @THAT
      D=M
      @SP
      A=M
      M=D
      @SP
      M=M+1
      @SP
      D=M
      @5
      D=D-A
      @0
      D=D-A
      @ARG
      M=D
      @SP
      D=M
      @LCL
      M=D
      @Sys.init
      0;JMP
  (Sys.init$ret.2)
// Main.fibonacci 0
  (Main.fibonacci)
      D=0
//push argument 0
      @ARG
      A=M
      D=M
      @SP
      A=M
      M=D
      @SP
      M=M+1
//push constant 2
      @2
      D=A
      @SP
      A=M
      M=D
      @SP
      M=M+1
//lt
      @SP
      M=M-1
      A=M
      D=M
      @SP
      M=M-1
      A=M
      D=M-D
      @Main$LABEL_3
      D;JLT
      D=0
      @SP
      A=M
      M=D
      @SP
      M=M+1
      @Main$LABEL_4
      0;JMP
  (Main$LABEL_3)
      D=-1
      @SP
      A=M
      M=D
      @SP
      M=M+1
  (Main$LABEL_4)
// if-goto IF_TRUE
      @SP
      M=M-1
      A=M
      D=M
      @Main$IF_TRUE
      D;JNE
// goto IF_FALSE
      @Main$IF_FALSE
      0;JMP
// label IF_TRUE
  (Main$IF_TRUE)
//push argument 0
      @ARG
      A=M
      D=M
      @SP
      A=M
      M=D
      @SP
      M=M+1
// return
      @LCL
      D=M
      @R15
      M=D
      @R15
      D=M
      @5
      D=D-A
      A=D
      D=M
      @R14
      M=D
      @SP
      M=M-1
      A=M
      D=M
      @ARG
      A=M
      M=D
      @ARG
      D=M+1
      @SP
      M=D
      @R15
      D=M
      @1
      D=D-A
      A=D
      D=M
      @THAT
      M=D
      @R15
      D=M
      @2
      D=D-A
      A=D
      D=M
      @THIS
      M=D
      @R15
      D=M
      @3
      D=D-A
      A=D
      D=M
      @ARG
      M=D
      @R15
      D=M
      @4
      D=D-A
      A=D
      D=M
      @LCL
      M=D
      @R14
      A=M
      0;JMP
// label IF_FALSE
  (Main$IF_FALSE)
//push argument 0
      @ARG
      A=M
      D=M
      @SP
      A=M
      M=D
      @SP
      M=M+1
//push constant 2
      @2
      D=A
      @SP
      A=M
      M=D
      @SP
      M=M+1
//sub
      @SP
      M=M-1
      A=M
      D=M
      @SP
      M=M-1
      A=M
      D=M-D
      @SP
      A=M
      M=D
      @SP
      M=M+1
// call Main.fibonacci 1
      @Main.fibonacci$ret.5
      D=A
      @SP
      A=M
      M=D
      @SP
      M=M+1
      @LCL
      D=M
      @SP
      A=M
      M=D
      @SP
      M=M+1
      @ARG
      D=M
      @SP
      A=M
      M=D
      @SP
      M=M+1
      @THIS
      D=M
      @SP
      A=M
      M=D
      @SP
      M=M+1
      @THAT
      D=M
      @SP
      A=M
      M=D
      @SP
      M=M+1
      @SP
      D=M
      @5
      D=D-A
      @1
      D=D-A
      @ARG
      M=D
      @SP
      D=M
      @LCL
      M=D
      @Main.fibonacci
      0;JMP
  (Main.fibonacci$ret.5)
//push argument 0
      @ARG
      A=M
      D=M
      @SP
      A=M
      M=D
      @SP
      M=M+1
//push constant 1
      @1
      D=A
      @SP
      A=M
      M=D
      @SP
      M=M+1
//sub
      @SP
      M=M-1
      A=M
      D=M
      @SP
      M=M-1
      A=M
      D=M-D
      @SP
      A=M
      M=D
      @SP
      M=M+1
// call Main.fibonacci 1
      @Main.fibonacci$ret.6
      D=A
      @SP
      A=M
      M=D
      @SP
      M=M+1
      @LCL
      D=M
      @SP
      A=M
      M=D
      @SP
      M=M+1
      @ARG
      D=M
      @SP
      A=M
      M=D
      @SP
      M=M+1
      @THIS
      D=M
      @SP
      A=M
      M=D
      @SP
      M=M+1
      @THAT
      D=M
      @SP
      A=M
      M=D
      @SP
      M=M+1
      @SP
      D=M
      @5
      D=D-A
      @1
      D=D-A
      @ARG
      M=D
      @SP
      D=M
      @LCL
      M=D
      @Main.fibonacci
      0;JMP
  (Main.fibonacci$ret.6)
//add
      @SP
      M=M-1
      A=M
      D=M
      @SP
      M=M-1
      A=M
      D=D+M
      @SP
      A=M
      M=D
      @SP
      M=M+1
// return
      @LCL
      D=M
      @R15
      M=D
      @R15
      D=M
      @5
      D=D-A
      A=D
      D=M
      @R14
      M=D
      @SP
      M=M-1
      A=M
      D=M
      @ARG
      A=M
      M=D
      @ARG
      D=M+1
      @SP
      M=D
      @R15
      D=M
      @1
      D=D-A
      A=D
      D=M
      @THAT
      M=D
      @R15
      D=M
      @2
      D=D-A
      A=D
      D=M
      @THIS
      M=D
      @R15
      D=M
      @3
      D=D-A
      A=D
      D=M
      @ARG
      M=D
      @R15
      D=M
      @4
      D=D-A
      A=D
      D=M
      @LCL
      M=D
      @R14
      A=M
      0;JMP
// Sys.init 0
  (Sys.init)
      D=0
//push constant 4
      @4
      D=A
      @SP
      A=M
      M=D
      @SP
      M=M+1
// call Main.fibonacci 1
      @Main.fibonacci$ret.7
      D=A
      @SP
      A=M
      M=D
      @SP
      M=M+1
      @LCL
      D=M
      @SP
      A=M
      M=D
      @SP
      M=M+1
      @ARG
      D=M
      @SP
      A=M
      M=D
      @SP
      M=M+1
      @THIS
      D=M
      @SP
      A=M
      M=D
      @SP
      M=M+1
      @THAT
      D=M
      @SP
      A=M
      M=D
      @SP
      M=M+1
      @SP
      D=M
      @5
      D=D-A
      @1
      D=D-A
      @ARG
      M=D
      @SP
      D=M
      @LCL
      M=D
      @Main.fibonacci
      0;JMP
  (Main.fibonacci$ret.7)
// label WHILE
  (Sys$WHILE)
// goto WHILE
      @Sys$WHILE
      0;JMP
