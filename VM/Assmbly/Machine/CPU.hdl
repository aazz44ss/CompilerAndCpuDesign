// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    And(a=instruction[15],b=instruction[3],out=writeM); // if C instruction and instr[3] then writeM
    And(a=instruction[15],b=instruction[4],out=writeD); // if C instruction and instr[4] then writeD
    And(a=instruction[15],b=instruction[5],out=destA2); // if C instruction and instr[5] then writeA
    Not(in=instruction[15],out=destA1);                 // if A instruction              then writeA
    Or(a=destA1,b=destA2,out=writeA);

    DRegister(in=ALUout,load=writeD,out=DRout);                   // ALU input1 is D register

    Mux16(a=instruction,b=ALUout,sel=instruction[15],out=ARin);
    ARegister(in=ARin,load=writeA,out=ARout,out[0..14]=addressM); // A register is ALUout or instruction
    Mux16(a=ARout,b=inM,sel=instruction[12],out=AorM);            // ALU input2 is A register or inM

    ALU(x=DRout,y=AorM,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=ALUout,out=outM,zr=zr,ng=ng);
    Or(a=ng,b=zr,out=Ngt);
    Not(in=Ngt,out=gt);			// if ng==0( ALUout < 0 ) and zr ==0 ( ALUout == 0 ), that is to say ALUout > 0

    And(a=instruction[2],b=ng,out=JPA);
    And(a=instruction[1],b=zr,out=JPB);
    And(a=instruction[0],b=gt,out=JPC);
    Or(a=JPA,b=JPB,out=t1);
    Or(a=JPC,b=t1,out=JP1);
    And(a=JP1,b=instruction[15],out=JP); // if c instruction and need Jump

    Not(in=JP,out=nJP);
    PC(in=ARout,load=JP,inc=nJP,reset=reset,out[0..14]=pc);
}
